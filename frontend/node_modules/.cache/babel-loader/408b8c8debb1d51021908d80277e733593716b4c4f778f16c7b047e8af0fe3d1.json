{"ast":null,"code":"var _jsxFileName = \"/Users/admin/PycharmProjects/gatewayex/frontend/src/App.js\",\n  _s = $RefreshSig$();\nimport './App.css';\nimport React, { useEffect, useState } from \"react\";\nimport { Switch, Route, useNavigate } from 'react-router-dom';\nimport axios from \"axios\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction LoginForm({\n  userType\n}) {\n  _s();\n  const [username, setUsername] = useState('');\n  const [errorMessage, setErrorMessage] = useState('');\n  const navigate = useNavigate();\n  const data = {\n    username: username\n  };\n\n  // const config of json type for axios\n  const config = {\n    headers: {\n      \"Content-Type\": \"application/json\" // Use standard JSON content type\n    }\n  };\n\n  // Placeholder set according to type\n  const getPlc = () => {\n    switch (userType) {\n      case 'Admin':\n        return `Admin Username`;\n      case 'Operator':\n        return `Operator Username`;\n      default:\n        return `Administrator`;\n    }\n  };\n\n  // title set according to type\n  const geth2title = () => {\n    switch (userType) {\n      case 'Admin':\n        return `Administrator Login`;\n      case 'Operator':\n        return `Operator Login`;\n      default:\n        return `Create`;\n    }\n  };\n\n  //Login Button title set according to type\n  const getLoginTitle = () => {\n    switch (userType) {\n      case 'Admin':\n        return `Login as Admin`;\n      case 'Operator':\n        return `Login as Operator`;\n      default:\n        return `Create an Administrator`;\n    }\n  };\n\n  //Submit Action Login method\n  const setActionSubmit = () => {\n    switch (userType) {\n      case 'Admin':\n        handleAdminLogin();\n        break;\n      case 'Operator':\n        handleOperatorLogin();\n        break;\n      default:\n        handlecreateAdmin().then();\n    }\n  };\n\n  //Admin Login method\n  const handleAdminLogin = () => {\n    const user_type_login = \"1\";\n    data['user_type'] = user_type_login;\n    if (username.trim() === '') {\n      // Display an error message if the username is empty\n      setErrorMessage('Username cannot be empty');\n    } else {\n      // Clear any previous error message\n      setErrorMessage('');\n      axios.post('http://localhost:8000/api/user-login/', JSON.stringify(data), config).then(response => {\n        console.log(response.data);\n        saveLocally(response.data, user_type_login);\n        navigate(\"admin\");\n        // Handle data\n      }).catch(error => {\n        console.log(error);\n      });\n      //   this.props.history.push(AdminAccess());\n\n      // Handle login logic here (e.g., send username to the server)\n      console.log(`Logging in as ${userType} with username: ${username}`);\n    }\n  };\n\n  //Save User data locally in react js\n  const saveLocally = (resp, user_type) => {\n    localStorage.setItem('username', resp.username);\n    localStorage.setItem('user_type', user_type);\n    localStorage.setItem('id', resp.id);\n    if ('admin_id' in resp) {\n      localStorage.setItem('admin_id', resp.admin_id);\n    }\n  };\n\n  //Operator Login method\n  const handleOperatorLogin = () => {\n    const user_type_login = \"2\";\n    data['user_type'] = user_type_login;\n    if (username.trim() === '') {\n      // Display an error message if the username is empty\n      setErrorMessage('Username cannot be empty');\n    } else {\n      // Clear any previous error message\n      setErrorMessage('');\n      axios.post('http://localhost:8000/api/user-login/', JSON.stringify(data), config).then(response => {\n        saveLocally(response.data, user_type_login);\n        navigate(\"gateway\");\n        // Handle data\n      }).catch(error => {\n        console.log(error);\n      });\n\n      // Handle login logic here (e.g., send username to the server)\n      console.log(`Logging in as ${userType} with username: ${username}`);\n    }\n  };\n\n  //Admin creation method\n  const handlecreateAdmin = async () => {\n    const user_type_login = \"1\";\n    axios.post('http://localhost:8000/api/create-admin/', JSON.stringify(data), config).then(response => {\n      saveLocally(response.data.data, user_type_login);\n      navigate(\"admin\");\n    }).catch(error => {\n      console.log(error);\n      if (error.response.data.message != null) {\n        alert(error.response.data.message);\n      } else {\n        alert(error.message);\n      }\n    });\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"login-form\",\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: geth2title()\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 157,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"text\",\n      placeholder: getPlc(),\n      value: username,\n      onChange: e => setUsername(e.target.value),\n      className: \"text-input\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 158,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: setActionSubmit,\n      children: getLoginTitle()\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 165,\n      columnNumber: 13\n    }, this), errorMessage && /*#__PURE__*/_jsxDEV(\"p\", {\n      className: \"error-message\",\n      children: errorMessage\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 166,\n      columnNumber: 30\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 156,\n    columnNumber: 9\n  }, this);\n}\n\n//Handles 3 textboxes for login and create\n_s(LoginForm, \"/KftXeHJkscCitZvAfe4EMPJTG8=\", false, function () {\n  return [useNavigate];\n});\n_c = LoginForm;\nfunction App() {\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"center-container\",\n    children: [/*#__PURE__*/_jsxDEV(LoginForm, {\n      userType: \"Admin\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 175,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(LoginForm, {\n      userType: \"Operator\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 176,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(LoginForm, {\n      userType: \"CreateAdmin\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 177,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 174,\n    columnNumber: 9\n  }, this);\n}\n_c2 = App;\nexport default App;\nvar _c, _c2;\n$RefreshReg$(_c, \"LoginForm\");\n$RefreshReg$(_c2, \"App\");","map":{"version":3,"names":["React","useEffect","useState","Switch","Route","useNavigate","axios","jsxDEV","_jsxDEV","LoginForm","userType","_s","username","setUsername","errorMessage","setErrorMessage","navigate","data","config","headers","getPlc","geth2title","getLoginTitle","setActionSubmit","handleAdminLogin","handleOperatorLogin","handlecreateAdmin","then","user_type_login","trim","post","JSON","stringify","response","console","log","saveLocally","catch","error","resp","user_type","localStorage","setItem","id","admin_id","message","alert","className","children","fileName","_jsxFileName","lineNumber","columnNumber","type","placeholder","value","onChange","e","target","onClick","_c","App","_c2","$RefreshReg$"],"sources":["/Users/admin/PycharmProjects/gatewayex/frontend/src/App.js"],"sourcesContent":["import './App.css';\n\nimport React, {useEffect, useState} from \"react\";\n\nimport {Switch, Route, useNavigate} from 'react-router-dom';\nimport axios from \"axios\";\n\nfunction LoginForm({userType}) {\n    const [username, setUsername] = useState('');\n    const [errorMessage, setErrorMessage] = useState('');\n    const navigate = useNavigate();\n    const data = {\n        username: username\n    };\n\n    // const config of json type for axios\n    const config = {\n        headers: {\n            \"Content-Type\": \"application/json\" // Use standard JSON content type\n        }\n    };\n\n    // Placeholder set according to type\n    const getPlc = () => {\n        switch (userType) {\n            case 'Admin':\n                return `Admin Username`;\n            case 'Operator':\n                return `Operator Username`;\n            default:\n                return `Administrator`;\n        }\n    };\n\n    // title set according to type\n    const geth2title = () => {\n        switch (userType) {\n            case 'Admin':\n                return `Administrator Login`;\n            case 'Operator':\n                return `Operator Login`;\n            default:\n                return `Create`;\n        }\n    };\n\n    //Login Button title set according to type\n    const getLoginTitle = () => {\n        switch (userType) {\n            case 'Admin':\n                return `Login as Admin`;\n            case 'Operator':\n                return `Login as Operator`;\n            default:\n                return `Create an Administrator`;\n        }\n    };\n\n    //Submit Action Login method\n    const setActionSubmit = () => {\n        switch (userType) {\n            case 'Admin':\n                handleAdminLogin();\n                break;\n            case 'Operator':\n                handleOperatorLogin();\n                break;\n            default:\n                handlecreateAdmin().then();\n        }\n    };\n\n    //Admin Login method\n    const handleAdminLogin = () => {\n        const user_type_login = \"1\"\n        data['user_type'] = user_type_login\n        if (username.trim() === '') {\n            // Display an error message if the username is empty\n            setErrorMessage('Username cannot be empty');\n        } else {\n            // Clear any previous error message\n            setErrorMessage('');\n            axios\n                .post('http://localhost:8000/api/user-login/', JSON.stringify(data), config)\n                .then((response) => {\n                    console.log(response.data);\n                    saveLocally(response.data, user_type_login)\n                    navigate(\"admin\");\n                    // Handle data\n                })\n                .catch((error) => {\n                    console.log(error);\n                })\n            //   this.props.history.push(AdminAccess());\n\n            // Handle login logic here (e.g., send username to the server)\n            console.log(`Logging in as ${userType} with username: ${username}`);\n        }\n    };\n\n    //Save User data locally in react js\n    const saveLocally = (resp, user_type) => {\n        localStorage.setItem('username', resp.username);\n        localStorage.setItem('user_type', user_type);\n        localStorage.setItem('id', resp.id);\n        if ('admin_id' in resp) {\n            localStorage.setItem('admin_id', resp.admin_id);\n        }\n    };\n\n    //Operator Login method\n    const handleOperatorLogin = () => {\n        const user_type_login = \"2\"\n        data['user_type'] = user_type_login\n        if (username.trim() === '') {\n            // Display an error message if the username is empty\n            setErrorMessage('Username cannot be empty');\n        } else {\n            // Clear any previous error message\n            setErrorMessage('');\n            axios\n                .post('http://localhost:8000/api/user-login/', JSON.stringify(data), config)\n                .then((response) => {\n                    saveLocally(response.data, user_type_login)\n                    navigate(\"gateway\");\n                    // Handle data\n                })\n                .catch((error) => {\n                    console.log(error);\n                })\n\n            // Handle login logic here (e.g., send username to the server)\n            console.log(`Logging in as ${userType} with username: ${username}`);\n        }\n    };\n\n    //Admin creation method\n    const handlecreateAdmin = async () => {\n        const user_type_login = \"1\"\n        axios\n            .post('http://localhost:8000/api/create-admin/', JSON.stringify(data), config)\n            .then((response) => {\n                saveLocally(response.data.data, user_type_login)\n                navigate(\"admin\");\n            })\n            .catch((error) => {\n                console.log(error);\n                if (error.response.data.message != null) {\n                    alert(error.response.data.message)\n                } else {\n                    alert(error.message)\n                }\n            })\n    };\n    return (\n        <div className=\"login-form\">\n            <h2>{geth2title()}</h2>\n            <input\n                type=\"text\"\n                placeholder={getPlc()}\n                value={username}\n                onChange={(e) => setUsername(e.target.value)}\n                className=\"text-input\"\n            />\n            <button onClick={setActionSubmit}>{getLoginTitle()}</button>\n            {errorMessage && <p className=\"error-message\">{errorMessage}</p>}\n        </div>\n    );\n}\n\n//Handles 3 textboxes for login and create\nfunction App() {\n    return (\n        <div className=\"center-container\">\n            <LoginForm userType=\"Admin\"/>\n            <LoginForm userType=\"Operator\"/>\n            <LoginForm userType=\"CreateAdmin\"/>\n        </div>\n    );\n}\n\nexport default App;\n\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}