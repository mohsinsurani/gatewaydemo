{"ast":null,"code":"var _jsxFileName = \"/Users/admin/PycharmProjects/gatewayex/frontend/src/components/admin_control.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport { Link, useNavigate } from \"react-router-dom\";\nimport GridView from '../gridview.css'; // Import the GridView component\nimport { ListViewComponent } from '@syncfusion/ej2-react-lists';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst data = [{\n  id: 1,\n  name: 'Item 1',\n  description: 'Description 1'\n}, {\n  id: 2,\n  name: 'Item 2',\n  description: 'Description 2'\n}\n// Add more items as needed\n];\n\nfunction AdminControl({\n  userType\n}) {\n  _s();\n  const [username, setUsername] = useState('');\n  const [errorMessage, setErrorMessage] = useState('');\n  const navigate = useNavigate();\n  const submit = () => {\n    if (username.trim() === '') {\n      // Display an error message if the username is empty\n      setErrorMessage(`${userType} fields cannot be empty`);\n    } else {\n      // Clear any previous error message\n      setErrorMessage('');\n      //   this.props.history.push(AdminAccess());\n\n      // Handle login logic here (e.g., send username to the server)\n      console.log(`Logging in as ${userType.value} with username: ${username}`);\n    }\n  };\n  const getLoginTitle = () => {\n    switch (userType) {\n      case 'Gateway':\n        return 'Delete the Gateway?';\n      default:\n        return 'Create an operator';\n    }\n  };\n  const geth2title = () => {\n    console.log(userType + \"Selected\");\n    switch (userType) {\n      case 'Gateway':\n        return `Gateway Deletion`;\n      case 'Operator':\n        return `Operator Deletion`;\n      default:\n        return `Operator Creation`;\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"login-form\",\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: geth2title()\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"text\",\n      placeholder: \"${userType} name\",\n      value: username,\n      onChange: e => setUsername(e.target.value),\n      className: \"text-input\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: submit,\n      children: getLoginTitle()\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 13\n    }, this), errorMessage && /*#__PURE__*/_jsxDEV(\"p\", {\n      className: \"error-message\",\n      children: errorMessage\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 30\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 50,\n    columnNumber: 9\n  }, this);\n}\n_s(AdminControl, \"/KftXeHJkscCitZvAfe4EMPJTG8=\", false, function () {\n  return [useNavigate];\n});\n_c = AdminControl;\nfunction AdminAccess() {\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"center-container\",\n    children: [/*#__PURE__*/_jsxDEV(AdminControl, {\n      userType: \"Operator\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"eggs\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(AdminControl, {\n      userType: \"Gateway\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(ListViewComponent, {\n      id: \"list\",\n      dataSource: data\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 23\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 67,\n    columnNumber: 9\n  }, this);\n}\n_c2 = AdminAccess;\nexport default AdminAccess;\nvar _c, _c2;\n$RefreshReg$(_c, \"AdminControl\");\n$RefreshReg$(_c2, \"AdminAccess\");","map":{"version":3,"names":["React","useState","Link","useNavigate","GridView","ListViewComponent","jsxDEV","_jsxDEV","data","id","name","description","AdminControl","userType","_s","username","setUsername","errorMessage","setErrorMessage","navigate","submit","trim","console","log","value","getLoginTitle","geth2title","className","children","fileName","_jsxFileName","lineNumber","columnNumber","type","placeholder","onChange","e","target","onClick","_c","AdminAccess","dataSource","_c2","$RefreshReg$"],"sources":["/Users/admin/PycharmProjects/gatewayex/frontend/src/components/admin_control.js"],"sourcesContent":["import React, {useState} from 'react';\nimport {Link, useNavigate} from \"react-router-dom\";\nimport GridView from '../gridview.css'; // Import the GridView component\nimport { ListViewComponent } from '@syncfusion/ej2-react-lists';\n\nconst data = [\n  { id: 1, name: 'Item 1', description: 'Description 1' },\n  { id: 2, name: 'Item 2', description: 'Description 2' },\n  // Add more items as needed\n];\nfunction AdminControl({ userType }) {\n    const [username, setUsername] = useState('');\n    const [errorMessage, setErrorMessage] = useState('');\n    const navigate = useNavigate();\n    const submit = () => {\n        if (username.trim() === '') {\n            // Display an error message if the username is empty\n            setErrorMessage(`${userType} fields cannot be empty`);\n        } else {\n            // Clear any previous error message\n            setErrorMessage('');\n            //   this.props.history.push(AdminAccess());\n\n            // Handle login logic here (e.g., send username to the server)\n            console.log(`Logging in as ${userType.value} with username: ${username}`);\n        }\n    };\n\n    const getLoginTitle = () => {\n        switch (userType) {\n            case 'Gateway':\n                return 'Delete the Gateway?';\n            default:\n                return 'Create an operator';\n        }\n    };\n\n    const geth2title = () => {\n        console.log(userType + \"Selected\")\n        switch (userType) {\n            case 'Gateway':\n                return `Gateway Deletion`;\n            case 'Operator':\n                return `Operator Deletion`;\n            default:\n                return `Operator Creation`;\n        }\n    };\n    return (\n        <div className=\"login-form\">\n            <h2>{geth2title()}</h2>\n            <input\n                type=\"text\"\n                placeholder=\"${userType} name\"\n                value={username}\n                onChange={(e) => setUsername(e.target.value)}\n                className=\"text-input\"\n            />\n            <button onClick={submit}>{getLoginTitle()}</button>\n            {errorMessage && <p className=\"error-message\">{errorMessage}</p>}\n        </div>\n    );\n}\n\nfunction AdminAccess() {\n    return (\n        <div className=\"center-container\">\n            <AdminControl userType=\"Operator\" />\n            <p>eggs</p>\n            <AdminControl userType='Gateway' />\n                      <ListViewComponent id=\"list\" dataSource={data} />\n        </div>\n    );\n}\n\nexport default AdminAccess;"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}