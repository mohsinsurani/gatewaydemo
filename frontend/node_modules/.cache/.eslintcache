[{"/Users/admin/PycharmProjects/gatewayex/frontend/src/index.js":"1","/Users/admin/PycharmProjects/gatewayex/frontend/src/reportWebVitals.js":"2","/Users/admin/PycharmProjects/gatewayex/frontend/src/App.js":"3","/Users/admin/PycharmProjects/gatewayex/frontend/src/components/admin_control.js":"4","/Users/admin/PycharmProjects/gatewayex/frontend/src/components/gateway_list.js":"5"},{"size":1234,"mtime":1695898676215,"results":"6","hashOfConfig":"7"},{"size":362,"mtime":1695592288757,"results":"8","hashOfConfig":"7"},{"size":5757,"mtime":1695898676959,"results":"9","hashOfConfig":"7"},{"size":11763,"mtime":1695898676311,"results":"10","hashOfConfig":"7"},{"size":2932,"mtime":1695898676382,"results":"11","hashOfConfig":"7"},{"filePath":"12","messages":"13","suppressedMessages":"14","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"c0s1o9",{"filePath":"15","messages":"16","suppressedMessages":"17","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"18"},{"filePath":"19","messages":"20","suppressedMessages":"21","errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"22"},{"filePath":"23","messages":"24","suppressedMessages":"25","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"26"},{"filePath":"27","messages":"28","suppressedMessages":"29","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"30"},"/Users/admin/PycharmProjects/gatewayex/frontend/src/index.js",["31","32","33"],[],"/Users/admin/PycharmProjects/gatewayex/frontend/src/reportWebVitals.js",[],[],["34"],"/Users/admin/PycharmProjects/gatewayex/frontend/src/App.js",["35","36","37","38","39"],[],"import './App.css';\n\nimport React, {useEffect, useState} from \"react\";\n\nimport {Switch, Route, useNavigate} from 'react-router-dom';\nimport axios from \"axios\";\n\nfunction LoginForm({userType}) {\n    const [username, setUsername] = useState('');\n    const [errorMessage, setErrorMessage] = useState('');\n    const navigate = useNavigate();\n    const data = {\n        username: username\n    };\n\n    // const config of json type for axios\n    const config = {\n        headers: {\n            \"Content-Type\": \"application/json\" // Use standard JSON content type\n        }\n    };\n\n    // Placeholder set according to type\n    const getPlc = () => {\n        switch (userType) {\n            case 'Admin':\n                return `Admin Username`;\n            case 'Operator':\n                return `Operator Username`;\n            default:\n                return `Administrator`;\n        }\n    };\n\n    // title set according to type\n    const geth2title = () => {\n        switch (userType) {\n            case 'Admin':\n                return `Administrator Login`;\n            case 'Operator':\n                return `Operator Login`;\n            default:\n                return `Create`;\n        }\n    };\n\n    //Login Button title set according to type\n    const getLoginTitle = () => {\n        switch (userType) {\n            case 'Admin':\n                return `Login as Admin`;\n            case 'Operator':\n                return `Login as Operator`;\n            default:\n                return `Create an Administrator`;\n        }\n    };\n\n    //Submit Action Login method\n    const setActionSubmit = () => {\n        switch (userType) {\n            case 'Admin':\n                handleAdminLogin();\n                break;\n            case 'Operator':\n                handleOperatorLogin();\n                break;\n            default:\n                handlecreateAdmin().then();\n        }\n    };\n\n    //Admin Login method\n    const handleAdminLogin = () => {\n        const user_type_login = \"1\"\n        data['user_type'] = user_type_login\n        if (username.trim() === '') {\n            // Display an error message if the username is empty\n            setErrorMessage('Username cannot be empty');\n        } else {\n            // Clear any previous error message\n            setErrorMessage('');\n            axios\n                .post('http://localhost:8000/api/user-login/', JSON.stringify(data), config)\n                .then((response) => {\n                    console.log(response.data);\n                    saveLocally(response.data, user_type_login)\n                    navigate(\"admin\");\n                    // Handle data\n                })\n                .catch((error) => {\n                    console.log(error);\n                })\n            //   this.props.history.push(AdminAccess());\n\n            // Handle login logic here (e.g., send username to the server)\n            console.log(`Logging in as ${userType} with username: ${username}`);\n        }\n    };\n\n    //Save User data locally in react js\n    const saveLocally = (resp, user_type) => {\n        localStorage.setItem('username', resp.username);\n        localStorage.setItem('user_type', user_type);\n        localStorage.setItem('id', resp.id);\n        if ('admin_id' in resp) {\n            localStorage.setItem('admin_id', resp.admin_id);\n        }\n    };\n\n    //Operator Login method\n    const handleOperatorLogin = () => {\n        const user_type_login = \"2\"\n        data['user_type'] = user_type_login\n        if (username.trim() === '') {\n            // Display an error message if the username is empty\n            setErrorMessage('Username cannot be empty');\n        } else {\n            // Clear any previous error message\n            setErrorMessage('');\n            axios\n                .post('http://localhost:8000/api/user-login/', JSON.stringify(data), config)\n                .then((response) => {\n                    saveLocally(response.data, user_type_login)\n                    navigate(\"gateway\");\n                    // Handle data\n                })\n                .catch((error) => {\n                    console.log(error);\n                })\n\n            // Handle login logic here (e.g., send username to the server)\n            console.log(`Logging in as ${userType} with username: ${username}`);\n        }\n    };\n\n    //Admin creation method\n    const handlecreateAdmin = async () => {\n        const user_type_login = \"1\"\n        axios\n            .post('http://localhost:8000/api/create-admin/', JSON.stringify(data), config)\n            .then((response) => {\n                saveLocally(response.data.data, user_type_login)\n                navigate(\"admin\");\n            })\n            .catch((error) => {\n                console.log(error);\n                if (error.response.data.message != null) {\n                    alert(error.response.data.message)\n                } else {\n                    alert(error.message)\n                }\n            })\n    };\n    return (\n        <div className=\"login-form\">\n            <h2>{geth2title()}</h2>\n            <input\n                type=\"text\"\n                placeholder={getPlc()}\n                value={username}\n                onChange={(e) => setUsername(e.target.value)}\n                className=\"text-input\"\n            />\n            <button onClick={setActionSubmit}>{getLoginTitle()}</button>\n            {errorMessage && <p className=\"error-message\">{errorMessage}</p>}\n        </div>\n    );\n}\n\n//Handles 3 textboxes for login and create\nfunction App() {\n    return (\n        <div className=\"center-container\">\n            <LoginForm userType=\"Admin\"/>\n            <LoginForm userType=\"Operator\"/>\n            <LoginForm userType=\"CreateAdmin\"/>\n        </div>\n    );\n}\n\nexport default App;\n\n","/Users/admin/PycharmProjects/gatewayex/frontend/src/components/admin_control.js",["40","41","42"],[],"import React, {useEffect, useState} from 'react';\nimport axios from \"axios\"; // Import the GridView component\nimport {useQuery, useQueryClient} from 'react-query';\n\nconst config = {\n    headers: {\n        \"Content-Type\": \"application/json\" // Use standard JSON content type\n    }\n};\n//Admin Control Screen\n\nfunction AdminControl({userType}) {\n    const [username, setUsername] = useState('');\n    const [errorMessage, setErrorMessage] = useState('');\n    const queryClient = useQueryClient();\n\n    //Delete Gateway or Create Administrator\n    const submit = () => {\n        if (username.trim() === '') {\n            // Display an error message if the username is empty\n            setErrorMessage(`${userType} fields cannot be empty`);\n        } else {\n            // Clear any previous error message\n            setErrorMessage('');\n            //   this.props.history.push(AdminAccess());\n            switch (userType) {\n                case 'Gateway':\n                    gateway_delete_action()\n                    break\n                default:\n                    create_operator_action()\n            }\n            // Handle login logic here (e.g., send username to the server)\n        }\n    };\n\n    //Delete Gateway Action\n    const gateway_delete_action = async () => {\n        // Assuming 'username' contains the location_name you want to delete\n// Construct the URL with the 'location_name' as a query parameter\n        const url = `http://localhost:8000/api/delete-gateway/?location_name=${username}`;\n\n// Make the DELETE request\n        axios\n            .delete(url, config)\n            .then(async (response) => {\n                console.log(response.data.message);\n                alert(response.data.message)\n                await queryClient.invalidateQueries('fetchList');\n                // Handle data\n            })\n            .catch((error) => {\n                console.log(error);\n                alert(error.response.data['message'])\n            })\n    }\n\n    //Create Operator Action\n    const create_operator_action = () => {\n        const data = {\n            username: username,\n            admin_username: localStorage.getItem(\"username\")\n        };\n        axios\n            .post('http://localhost:8000/api/create-operator/', JSON.stringify(data), config)\n            .then(async (response) => {\n                console.log(response.data);\n                alert(response.data.message)\n                await queryClient.invalidateQueries('fetchList');\n                // Handle data\n            })\n            .catch((error) => {\n                console.log(error);\n                alert(error.response.data['message'])\n            })\n    }\n\n    //Action button title of gateway/operator\n    const getLoginTitle = () => {\n        switch (userType) {\n            case 'Gateway':\n                return 'Delete the Gateway?';\n            default:\n                return 'Create an operator';\n        }\n    };\n\n    //Placeholder Textinput title of gateway/operator\n    const getPlc = () => {\n        switch (userType) {\n            case 'Gateway':\n                return `Location name`;\n            default:\n                return `Operator username`;\n        }\n    };\n\n    //title of gateway/operator\n    const geth2title = () => {\n        console.log(userType + \"Selected\")\n        switch (userType) {\n            case 'Gateway':\n                return `Gateway Deletion`;\n            default:\n                return `Operator Creation`;\n        }\n    };\n\n    //Single UI of Deleting gateway or create operator Handling\n    return (\n        <div className=\"login-form\">\n            <h2>{geth2title()}</h2>\n            <input\n                type=\"text\"\n                placeholder={getPlc()}\n                value={username}\n                onChange={(e) => setUsername(e.target.value)}\n                className=\"text-input\"\n            />\n            <button style={{margin: '10px 24px'}} onClick={submit}>{getLoginTitle()}</button>\n            {errorMessage && <p className=\"error-message\">{errorMessage}</p>}\n        </div>\n    );\n}\n\n//UI of Creating or updating gateway\nfunction GatewayForm({userType}) {\n    const [location_name, setLocation] = useState('');\n    const [antenna_dia, setAntenna] = useState('');\n    const [latitude, setLatitude] = useState('');\n    const [longtitude, setLongtitude] = useState('');\n\n    const [errorMessage, setErrorMessage] = useState('');\n    const config = {\n        headers: {\n            \"Content-Type\": \"application/json\" // Use standard JSON content type\n        }\n    };\n    const queryClient = useQueryClient();\n    const insert_gat = () => {\n        create_update_gateway(false)\n    };\n\n    const update_gat = () => {\n        create_update_gateway(true)\n    };\n\n    const create_update_gateway = (isUpdate) => {\n        if (longtitude.trim() === '' || latitude.trim() === '' || location_name === '' || antenna_dia === '') {\n            // Display an error message if the fields are empty\n            setErrorMessage(`fields cannot be empty`);\n        } else {\n            // Clear any previous error message\n            setErrorMessage('');\n        }\n        const data = {\n            antenna_diameter: antenna_dia,\n            location_name: location_name,\n            latitude: latitude,\n            longitude: longtitude,\n            admin_id: localStorage.getItem(\"id\"),\n            create_update: isUpdate\n        };\n\n        //Creating or updating gateway method and then using invalidating to reload the list of gateways\n        axios\n            .post('http://localhost:8000/api/create-gateway/', JSON.stringify(data), config)\n            .then(async (response) => {\n                let alert_str = \"Gateway created successfully\";\n                if (isUpdate) {\n                    alert_str = \"Gateway updated successfully\"\n                }\n                await queryClient.invalidateQueries('fetchList');\n                alert(alert_str)\n                // Handle data\n            })\n            .catch((error) => {\n                console.log(error);\n                alert(error.response.data['message'])\n            })\n    }\n\n    // Text input for the gateway\n    return (\n        <div className=\"login-form\">\n            <h2>Gateway Creation and Updation</h2>\n            <input\n                type=\"text\"\n                placeholder=\"Antenna diameter\"\n                value={antenna_dia}\n                onChange={(e) => setAntenna(e.target.value)}\n                className=\"text-input\"\n            />\n            <input\n                type=\"text\"\n                placeholder=\"Location name\"\n                value={location_name}\n                onChange={(e) => setLocation(e.target.value)}\n                className=\"text-input\"\n            />\n            <input\n                type=\"text\"\n                placeholder=\"Latitude\"\n                value={latitude}\n                onChange={(e) => setLatitude(e.target.value)}\n                className=\"text-input\"\n            />\n            <input\n                type=\"text\"\n                placeholder=\"Longtitude\"\n                value={longtitude}\n                onChange={(e) => setLongtitude(e.target.value)}\n                className=\"text-input\"\n            /><p></p>\n            <button style={{margin: '10px 24px'}} onClick={insert_gat}>{\"Insert\"}</button>\n            <button style={{margin: '10px 24px'}} onClick={update_gat}>{\"Update\"}</button>\n            {errorMessage && <p className=\"error-message\">{errorMessage}</p>}\n        </div>\n    );\n}\n\n\n//Method of list of gateways and operators\nfunction AdminAccess() {\n    const [gateways, setGateways] = useState([]);\n    const [operators, setOperators] = useState([]);\n\n\n    useEffect(() => {\n        fetchList()\n    }, []);\n\n    //Fetch of list of gateways and operators\n    const fetchList = () => {\n        const adminId = localStorage.getItem('id');\n\n        const gate_list_url = `http://localhost:8000/api/gateway-lists/?admin_id=${adminId}`;\n        const op_list_url = `http://localhost:8000/api/operator-lists/?admin_id=${adminId}`;\n\n        // Fetch gateways data from the backend API\n        axios\n            .get(gate_list_url, config)\n            .then((response) => {\n                setGateways(response.data);\n            })\n            .catch((error) => {\n                console.error('Error fetching gateways:', error);\n            });\n\n        axios\n            .get(op_list_url, config)\n            .then((response) => {\n                setOperators(response.data);\n            })\n            .catch((error) => {\n                console.error('Error fetching operators:', error);\n            });\n    }\n\n    //Fetch of list of gateways and operators when\n    // creation of uperator or deletion of gateway is done\n    const {data, isLoading, isError} = useQuery('fetchList', fetchList, {\n        refetchOnWindowFocus: false,\n    });\n\n    //Formating the display of latitude and longitude\n    const formatLatitudeLongitude = (latitude, longitude) => {\n        const formattedLatitude = parseFloat(latitude).toFixed(2);\n        const formattedLongitude = parseFloat(longitude).toFixed(2);\n\n        if (formattedLatitude.endsWith('.00')) {\n            return `${formattedLatitude.slice(0, -3)}, ${formattedLongitude.slice(0, -3)}`;\n        }\n\n        return `${formattedLatitude}, ${formattedLongitude}`;\n    };\n\n    //Formating the display of Antenna\n    const formatAnt = (antenna) => {\n        let formattedAntenna = parseFloat(antenna).toFixed(2);\n\n        if (formattedAntenna.endsWith('.00')) {\n            formattedAntenna = formattedAntenna.slice(0, -3)\n        }\n\n        return `${formattedAntenna}`;\n    };\n\n    //3 forms of input and 2 list UI\n    return (\n        <div>\n            <p style={{paddingLeft: 20}}> Admin Logged IN: {localStorage.getItem(\"username\")}</p>\n            <div className=\"left-container\">\n                <AdminControl userType=\"Operator\"/>\n                <AdminControl userType='Gateway'/>\n                <GatewayForm userType=\"Operator\"/>\n            </div>\n            <div>\n                <div style={{paddingLeft: 20, display: \"flex\", flexDirection: \"row\", marginTop: -420}}>\n                    <div style={{display: \"flex\", flexDirection: \"column\"}}>\n                        <p>List of Operators</p>\n                        {operators.map((item) => (\n                            <div>{item.username}</div>\n                        ))}\n                    </div>\n                    <div style={{paddingLeft: 220, display: \"flex\", flexDirection: \"column\"}}>\n                        <p>List of Gateways</p>\n                        <div className=\"gateway-list\">\n                            <table>\n                                <thead>\n                                <tr>\n                                    <th>Antenna</th>\n                                    <th>Location</th>\n                                    <th>Lat and Long</th>\n                                </tr>\n                                </thead>\n                                <tbody>\n                                {gateways.map((gateway, index) => (\n                                    <tr key={index} className=\"gateway-row\">\n                                        <td>{formatAnt(gateway.antenna_diameter)}</td>\n                                        <td>{gateway.location_name}</td>\n                                        <td>{formatLatitudeLongitude(gateway.latitude, gateway.longitude)}</td>\n                                    </tr>\n                                ))}\n                                </tbody>\n                            </table>\n                        </div>\n                    </div>\n                </div>\n            </div>\n        </div>\n    );\n}\n\nexport default AdminAccess;","/Users/admin/PycharmProjects/gatewayex/frontend/src/components/gateway_list.js",["43"],[],"import React, {useEffect, useState} from 'react';\nimport axios from \"axios\";\n\n//UI of Gateway List\nfunction GatewayList() {\n    const [gateways, setGateways] = useState([]);\n\n    const config = {\n        headers: {\n            \"Content-Type\": \"application/json\" // Use standard JSON content type\n        }\n    };\n    useEffect(() => {\n        const adminId = localStorage.getItem('admin_id');\n\n        const gate_list_url = `http://localhost:8000/api/gateway-lists/?admin_id=${adminId}`;\n        // Fetch gateways data from the backend API\n        axios\n            .get(gate_list_url, config)\n            .then((response) => {\n                setGateways(response.data);\n            })\n            .catch((error) => {\n                console.error('Error fetching gateways:', error);\n            });\n    }, []);\n\n    //Formatting of Antenna\n    const formatAnt = (antenna) => {\n        let formattedAntenna = parseFloat(antenna).toFixed(2);\n\n        if (formattedAntenna.endsWith('.00')) {\n            formattedAntenna = formattedAntenna.slice(0, -3)\n        }\n\n        return `${formattedAntenna}`;\n    };\n\n    //Formatting of latitude and longitude\n    const formatLatitudeLongitude = (latitude, longitude) => {\n        let formattedLatitude = parseFloat(latitude).toFixed(2);\n        let formattedLongitude = parseFloat(longitude).toFixed(2);\n\n        if (formattedLatitude.endsWith('.00')) {\n            formattedLatitude = formattedLatitude.slice(0, -3)\n        }\n        if (formattedLongitude.endsWith('.00')) {\n            formattedLongitude = formattedLongitude.slice(0, -3)\n        }\n\n        return `${formattedLatitude}, ${formattedLongitude}`;\n    };\n\n    //UI of List of gatweways for Operator\n    return (\n        <div>\n            <p style={{paddingLeft: 20}}> Operator Logged IN: {localStorage.getItem(\"username\")}</p>\n            <div style={{paddingLeft: 220, display: \"flex\", flexDirection: \"column\"}}>\n                <p>List of Gateways</p>\n                <div className=\"gateway-list\">\n                    <table>\n                        <thead>\n                        <tr>\n                            <th>Antenna</th>\n                            <th>Location</th>\n                            <th>Lat and Long</th>\n                        </tr>\n                        </thead>\n                        <tbody>\n                        {gateways.map((gateway, index) => (\n                            <tr key={index} className=\"gateway-row\">\n                                <td>{formatAnt(gateway.antenna_diameter)}</td>\n                                <td>{gateway.location_name}</td>\n                                <td>{formatLatitudeLongitude(gateway.latitude, gateway.longitude)}</td>\n                            </tr>\n                        ))}\n                        </tbody>\n                    </table>\n                </div>\n            </div>\n        </div>\n    );\n}\n\n\nexport default GatewayList;",{"ruleId":"44","severity":1,"message":"45","line":9,"column":3,"nodeType":"46","messageId":"47","endLine":9,"endColumn":8},{"ruleId":"44","severity":1,"message":"48","line":10,"column":3,"nodeType":"46","messageId":"47","endLine":10,"endColumn":7},{"ruleId":"49","severity":1,"message":"50","line":27,"column":14,"nodeType":"51","messageId":"52","endLine":27,"endColumn":30},{"ruleId":"53","replacedBy":"54"},{"ruleId":"44","severity":1,"message":"55","line":1,"column":8,"nodeType":"46","messageId":"47","endLine":1,"endColumn":12},{"ruleId":"44","severity":1,"message":"56","line":4,"column":16,"nodeType":"46","messageId":"47","endLine":4,"endColumn":25},{"ruleId":"44","severity":1,"message":"57","line":6,"column":26,"nodeType":"46","messageId":"47","endLine":6,"endColumn":32},{"ruleId":"44","severity":1,"message":"58","line":6,"column":34,"nodeType":"46","messageId":"47","endLine":6,"endColumn":40},{"ruleId":"44","severity":1,"message":"45","line":6,"column":42,"nodeType":"46","messageId":"47","endLine":6,"endColumn":47},{"ruleId":"44","severity":1,"message":"59","line":242,"column":12,"nodeType":"46","messageId":"47","endLine":242,"endColumn":16},{"ruleId":"44","severity":1,"message":"60","line":242,"column":18,"nodeType":"46","messageId":"47","endLine":242,"endColumn":27},{"ruleId":"44","severity":1,"message":"61","line":242,"column":29,"nodeType":"46","messageId":"47","endLine":242,"endColumn":36},{"ruleId":"62","severity":1,"message":"63","line":25,"column":8,"nodeType":"64","endLine":25,"endColumn":10,"suggestions":"65"},"no-unused-vars","'Route' is defined but never used.","Identifier","unusedVar","'Link' is defined but never used.","react/jsx-pascal-case","Imported JSX component Admin_control must be in PascalCase or SCREAMING_SNAKE_CASE","JSXOpeningElement","usePascalOrSnakeCase","no-new-object",["66"],"'logo' is defined but never used.","'useEffect' is defined but never used.","'Router' is defined but never used.","'Switch' is defined but never used.","'data' is assigned a value but never used.","'isLoading' is assigned a value but never used.","'isError' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'config'. Either include it or remove the dependency array.","ArrayExpression",["67"],"no-object-constructor",{"desc":"68","fix":"69"},"Update the dependencies array to be: [config]",{"range":"70","text":"71"},[787,789],"[config]"]